import java.nio.file.FileVisitResult
import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.SimpleFileVisitor
import java.nio.file.StandardCopyOption
import java.nio.file.attribute.BasicFileAttributes

buildscript {
    repositories {
        if( project.hasProperty('artifactory_contextUrl') ) {
            maven {
                url "${artifactory_contextUrl}"
                credentials {
                    username = "${artifactory_user}"
                    password = "${artifactory_password}"
                }
            }
        }

        mavenCentral()
        jcenter()
    }
    dependencies {
        //Check for the latest version here: http://plugins.gradle.org/plugin/com.jfrog.artifactory
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.7.7'
    }
}

if( project.hasProperty('artifactory_contextUrl') ) {
    allprojects {
        apply plugin: "com.jfrog.artifactory"
    }

    artifactory {
        contextUrl = "${artifactory_contextUrl}"
        publish {
            repository {
                repoKey = "${publish_repoKey}"
                username = "${artifactory_user}"
                password = "${artifactory_password}"
                maven = true

            }
            defaults {
                // Reference to Gradle publications defined in the build script.
                // This is how we tell the Artifactory Plugin which artifacts should be
                // published to Artifactory.
                publications('mavenJava')
                publishArtifacts = true
                // Publish generated POM files to Artifactory (true by default)
                publishPom = true
            }
        }
        resolve {
            repository {
                repoKey = "${resolve_repoKey}"
                username = "${artifactory_user}"
                password = "${artifactory_password}"
                maven = true

            }
        }
    }

    repositories {
        maven {
            url "$artifactory_contextUrl/$resolve_repoKey"
            credentials {
                username "${artifactory_user}"
                password "${artifactory_password}"
            }
        }
    }

}else {
    repositories {
        mavenCentral()
    }
}

apply plugin: 'java'
apply plugin: 'com.google.protobuf'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'project-report'


group = 'org.nasa.jpl.nexus'
version = '1.1.0.RELEASE'

ext{
    genDirectory = "$projectDir/gen"
    distDirectory = "$projectDir/distrobution"
    pythonBuildDirPath = "${file(buildDir.path + '/python/nexusproto').path}"
}

protobuf {

    generatedFilesBaseDir = genDirectory

    // Configure the protoc executable
    protoc {
        // Download from repositories
        artifact = 'com.google.protobuf:protoc:2.6.1'
    }

    plugins {
        // Define a plugin with name 'grpc'
        grpc {
            path = 'tools/protoc-gen-grpc-java'
        }
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                python {
                    outputSubDir = 'python'
                }
            }
        }
    }

}

task writeNewPom << {
    pom {}.writeTo(file(buildDir.path + "/poms/${project.name}-${project.version}.xml"))
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

assemble.doLast{
    File pythonbuilddir = file(pythonBuildDirPath)

    File pythonsource = file('src/main/python')

    Files.walkFileTree(pythonsource.toPath(), new SimpleFileVisitor<Path>() {
        @Override
        public FileVisitResult preVisitDirectory(final Path dir, final BasicFileAttributes attrs) throws IOException {
            Files.createDirectories(pythonbuilddir.toPath().resolve(pythonsource.toPath().relativize(dir)))
            return FileVisitResult.CONTINUE
        }

        @Override
        public FileVisitResult visitFile(final Path file, final BasicFileAttributes attrs) throws IOException {
            Files.copy(file, pythonbuilddir.toPath().resolve(pythonsource.toPath().relativize(file)), StandardCopyOption.REPLACE_EXISTING)
            return FileVisitResult.CONTINUE
        }
    })

    Files.move(file(pythonbuilddir.path + '/nexusproto/setup.py').toPath(), file(pythonbuilddir.path + '/setup.py').toPath(), StandardCopyOption.REPLACE_EXISTING)

    File generatedPython = file("$genDirectory/main/python/NexusContent_pb2.py")

    Files.copy(generatedPython.toPath(), file(pythonbuilddir.path + '/nexusproto/NexusContent_pb2.py').toPath(), StandardCopyOption.REPLACE_EXISTING)
}


if( project.hasProperty('python_executable') ) {
    task publishPython(type: Exec, group: "publishing", dependsOn: [assemble]) {
        workingDir "$pythonBuildDirPath"
        commandLine "$python_executable", 'setup.py', 'bdist_wheel', 'upload', '-r', 'deepdata-artifactory-pypi'
    }
}

task tarPython(type: Tar, dependsOn: [assemble]){
    destinationDir = file("distrobution")
    archiveName = 'nexusproto.tar.gz'
    compression = Compression.GZIP
    from(file(buildDir.path + '/python')){
        include '**/*'
    }
}

clean << {
    file(genDirectory).deleteDir()
    file(distDirectory).deleteDir()
}

dependencies {

    compile 'com.google.protobuf:protobuf-java:2.6.1'

}

task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}